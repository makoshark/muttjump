#!/bin/bash
# written by Johannes Wei√ül

# muttjump
#
# This script makes mail indexers (like mairix, mu or nmzmail) together with
# mutt more useful.
#
# These search engines usually create a virtual maildir containing symbolic
# links to the original mails, which can be browsed using mutt.
# It would be optimal if mutt somehow knew that the two maildir entries
# identify the same mail, but this is not that easy (mail folder
# abstraction from different formats, no tight integration of mail indexers).
#
# So if one wants to rename (for setting/clearing flags), delete or edit the
# mails, it is only possible using the original mail. This (very simple)
# script helps to jump to this message, using e.g. this macro in .muttrc:
#
# macro generic ,j "<enter-command>push <pipe-message>muttjump<enter><enter>" "jump to original message"

# one of: mairix, mu, mu-old (mu < 0.7) and nmzmail
MUTTJUMP_INDEXER=${MUTTJUMP_INDEXER:-}

# "limit" or "search" (default)
MUTTJUMP_MODE=${MUTTJUMP_MODE:-search}

# "yes", "no" or "auto"
# If set to "auto", the $STY environment variable is used for auto detection.
MUTTJUMP_USE_SCREEN=${MUTTJUMP_USE_SCREEN:-auto}

# "yes" or "no"
# If this is set to "yes", muttjump will not open a new instance of
# mutt, but instead jump to the original message in a running mutt
# (which is running in a screen session).
# ATTENTION: You need to have one mutt instance open for every mailbox
#            for this to work!
MUTTJUMP_MULTI_SCREEN_MODE=${MUTTJUMP_MULTI_SCREEN_MODE:-no}

# function to create the screen window name from the full path of the mailbox
if ! type MUTTJUMP_SCREEN_WINDOW_NAME_MANGLE >/dev/null 2>&1 ; then
    function MUTTJUMP_SCREEN_WINDOW_NAME_MANGLE () {
        basename "$1"
    }
fi

# program paths
MUTT=${MUTT:-mutt}
MAIRIX=${MAIRIX:-mairix}
MU=${MU:-mu}
NMZMAIL=${NMZMAIL:-nmzmail}
SCREEN=${SCREEN:-screen}
FORMAIL=${FORMAIL:-formail}
REFORMAIL=${REFORMAIL:-reformail}
WHIPTAIL=${WHIPTAIL:-whiptail --noitem}
DIALOG=${DIALOG:-dialog}

function die () {
    echo -e >&2 "$0: $1"
    exit 1
}

function quote () {
    echo \'${1//\'/\'\\\'\'}\'
}

function is_callable () {
    type $1 >/dev/null 2>&1
}

function usage () {
    cat >&2 <<END
Usage: muttjump msgid
       cat msg | muttjump [-R]

This script calls mutt, jumping to the message given in stdin or to the message
identified by "msgid".  With "-R", it jumps to the message being replied to.
It uses a mail search engine (currently mairix, mu and nmzmail are supported),
which has to be configured through MUTTJUMP_INDEXER variable.
END
    exit 1
}

function reopen_tty () {
    # Close message-stdin and open terminal-stdin instead.
    # mutt behaves different if STDIN is no terminal
    # TODO: Find cleaner solution (e.g. mutt command-line argument?)
    exec 0<&-
    term="/dev/$(ps -p$$ -otty=)"
    exec < $term
}


# Check command-line arguments and STDIN
search_header="Message-ID"
if tty -s ; then
    [ $# -ne 1 ] && usage
else
    [ $# -gt 1 ] && usage
    if [ $# -eq 1 ] ; then
        [ "$1" != "-R" ] && usage
        search_header="In-Reply-To"
        shift
    fi
fi

# check if mutt is installed
if ! is_callable $MUTT ; then
    die "$MUTT is not in PATH, set MUTT variable"
fi

DIALOG_PROG=""
if is_callable $WHIPTAIL ; then
    DIALOG_PROG=$WHIPTAIL
elif is_callable $DIALOG ; then
    DIALOG_PROG=$DIALOG
fi

case $MUTTJUMP_MODE in
    limit|search)
        ;;
    *)
        die "variable MUTTJUMP_MODE must be set to \"limit\" or \"search\""
        ;;
esac

# search for Message-ID in STDIN
if [ $# -eq 1 ] ; then
    msgid=$1
elif is_callable $FORMAIL ; then
    msgid=$($FORMAIL -c -z -x $search_header | head -n1)
elif is_callable $REFORMAIL ; then
    msgid=$($REFORMAIL -c -x $search_header: | head -n1)
else
    msgid=$(sed -n 's/^'$search_header':[ \t]*\(.*\)/\1/Ip' | head -n1)
fi
if [ -z "$msgid" ] ; then
    die "could not find $search_header header in standard input"
fi
msgid_quoted=$(quote_regexp "$msgid")
msgid_clean=$(echo "$msgid" | sed -e 's/^<//' -e 's/>$//')

# try to locate path of message using a mail search engine
case $MUTTJUMP_INDEXER in
    mairix)
        # mairix can't quote special characters (~,/=^) in search words. As a
        # workaround, split Message-ID in 31-character long AND-linked
        # substrings.
        msgid_mairix=$(echo "$msgid_clean" | sed -e 's/[~,/=^]/=,/g' \
            -e 's/.\{31\}/&=,/g' -e 's/^\(=,\)\+//g' -e 's/$/=/' \
            -e 's/\(=,\|=\)\+$/=/g')
        orig_msgfiles=$($MAIRIX -r "m:$msgid_mairix")
        ;;
    mu)
        orig_msgfiles=$($MU find -f l "i:$msgid_clean" | grep -v "^\*\*")
        ;;
    mu-old)
        orig_msgfiles=$($MU find -f p "m:$msgid_clean")
        ;;
    nmzmail)
        nmzmail_results=$(mktemp -d)
        echo "+message-id:$msgid" | $NMZMAIL -r "$nmzmail_results"
        orig_msgfiles=$(find "$nmzmail_results" -type l -exec readlink {} \;)
        rm -rf "$nmzmail_results"
        ;;
    "")
        die "variable MUTTJUMP_INDEXER not set or empty"
        ;;
    *)
        die "unknown mail index program \"$MUTTJUMP_INDEXER\""
        ;;
esac

if [ -z "$orig_msgfiles" ] ; then
    die "no message with msgid $msgid found!"
fi

count=$(echo "$orig_msgfiles" | wc -l)
if [ $count -gt 1 -a -n "$DIALOG_PROG" ] ; then
    choices=$(echo "$orig_msgfiles" | while read line ;
        do dirname "$(dirname "$line")" ; echo . ; done)
    maxwidth=$(echo "$choices" | wc -L)
    orig_maildir=$($DIALOG_PROG --clear --title "More than one mailbox found" \
        --menu "Select mailbox:" $((count+8)) $((maxwidth+16)) \
        $count $choices 3>&2 2>&1 1>&3-)
elif [ $count -gt 1 ] ; then
    choices=()
    while read line ; do
        choices=("${choices[@]}" "$(dirname "$(dirname "$line")")")
    done <<<"$orig_msgfiles"
    echo "More than one mailbox found"
    echo "Select mailbox:"
    select md in "${choices[@]}" ; do
        orig_maildir=$md
        break
    done <> /dev/tty
else
    orig_msgfile=$orig_msgfiles
    # get containing maildir of $orig_msgfile
    orig_maildir=$(dirname "$(dirname "$orig_msgfile")")
fi

if [ ! -d "$orig_maildir/cur" ] ; then
    die "directory $(quote "$orig_maildir") doesn't exist or is no Maildir"
fi

jump_expr="~i'$msgid'"

if [ "$MUTTJUMP_MULTI_SCREEN_MODE" = no ] ; then

    jump_cmd="<limit>$jump_expr<enter>"
    if [ "$MUTTJUMP_MODE" = search ] ; then
        jump_cmd="$jump_cmd<limit>all<enter>"
    fi

    if [ "$MUTTJUMP_USE_SCREEN" = auto -a -n "$STY" ] ; then
        MUTTJUMP_USE_SCREEN=yes
    fi

    screen_opts=()
    if [ "$MUTTJUMP_USE_SCREEN" = yes ] ; then
        if [ -n "$STY" ] ; then
            screen_opts=("-X" "screen")
        else
            reopen_tty
        fi
        screen_window_name=$(MUTTJUMP_SCREEN_WINDOW_NAME_MANGLE "$orig_maildir")
        screen_opts=("${screen_opts[@]}" "-t" "$screen_window_name")
    else
        SCREEN=""
        reopen_tty
    fi

    # start mutt, open original folder and jump to the original message
    $SCREEN "${screen_opts[@]}" $MUTT -f "$orig_maildir" -e "push \"$jump_cmd\""

else

    jump_cmd="l$jump_expr"
    if [ "$MUTTJUMP_MODE" = search ] ; then
        jump_cmd="${jump_cmd}lall"
    fi

    screen_window_name=$(MUTTJUMP_SCREEN_WINDOW_NAME_MANGLE "$orig_maildir")

    $SCREEN -p "$screen_window_name" -X eval "select '$screen_window_name'" "stuff \"$jump_cmd\""
fi
