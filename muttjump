#!/bin/bash
# written by Johannes Wei√ül

# muttjump
#
# This script makes mail indexers (like mairix, mu or nmzmail) together with
# mutt more useful.
#
# These search engines usually create a virtual maildir containing symbolic
# links to the original mails, which can be browsed using mutt.
# It would be optimal if mutt somehow knew that the two maildir entries
# identify the same mail, but this is not that easy (mail folder
# abstraction from different formats, no tight integration of mail indexers).
#
# So if one wants to rename (for setting/clearing flags), delete or edit the
# mails, it is only possible using the original mail. This (very simple)
# script helps to jump to this message, using e.g. this macro in .muttrc:
#
# macro generic ,j "<enter-command>push <pipe-message>muttjump<enter><enter>" "jump to original message"

# one of: mairix, mu, mu-old (mu < 0.7) and nmzmail
MUTTJUMP_INDEXER=${MUTTJUMP_INDEXER:-}

# "limit" or "search" (default)
MUTTJUMP_MODE=${MUTTJUMP_MODE:-search}

# "yes" or "no"
# If this is set to "yes", muttjump will not open a new instance of
# mutt, but instead jump to the original message in a running mutt
# (which is running in a screen session).
# ATTENTION: You need to have one mutt instance open for every mailbox
#            for this to work!
MUTTJUMP_MULTI_SCREEN_MODE=${MUTTJUMP_MULTI_SCREEN_MODE:-no}

# name of the screen session (screen -S ...), leave blank for none
MUTTJUMP_SCREEN_SESSION=${MUTTJUMP_SCREEN_SESSION:-}

# function to create the screen window name from the full path of the mailbox
if ! type -p MUTTJUMP_SCREEN_WINDOW_NAME_MANGLE >/dev/null ; then
    function MUTTJUMP_SCREEN_WINDOW_NAME_MANGLE () {
        basename "$1"
    }
fi

# program paths
MUTT=${MUTT:-mutt}
MAIRIX=${MAIRIX:-mairix}
MU=${MU:-mu}
NMZMAIL=${NMZMAIL:-nmzmail}
SCREEN=${SCREEN:-screen}
FORMAIL=${FORMAIL:-formail}
REFORMAIL=${REFORMAIL:-reformail}

function die () {
    echo -e >&2 "$0: $1"
    exit 1
}

function quote () {
    echo \'${1//\'/\'\\\'\'}\'
}

function is_callable () {
    type -p $1 >/dev/null
}

# Check command-line arguments and STDIN
if tty -s || [ $# -ne 0 ] ; then
    cat >&2 <<END
Usage: $0 < msg

This script calls mutt, jumping to the message given in stdin.
Uses a mail search engine (currently mairix, mu and nmzmail are supported),
which has to be configured through MUTTJUMP_INDEXER variable.
END
    exit 1
fi

# check if mutt is installed
if ! is_callable $MUTT ; then
    die "$MUTT is not in PATH, set MUTT variable"
fi

case $MUTTJUMP_MODE in
    limit|search)
        ;;
    *)
        die "variable MUTTJUMP_MODE must be set to \"limit\" or \"search\""
        ;;
esac

# search for Message-ID in STDIN
if is_callable $FORMAIL ; then
    msgid=$($FORMAIL -c -z -x Message-ID | head -n1)
elif is_callable $REFORMAIL ; then
    msgid=$($REFORMAIL -c -x Message-ID: | head -n1)
else
    msgid=$(sed -n 's/^Message-ID:[ \t]*\(.*\)/\1/Ip' | head -n1)
fi
if [ -z "$msgid" ] ; then
    die "could not find Message-ID header in standard input"
fi
msgid_clean=$(echo "$msgid" | sed 's/^<\(.*\)>$/\1/')

# try to locate path of message using a mail search engine
case $MUTTJUMP_INDEXER in
    mairix)
        orig_msgfile=$($MAIRIX -r "m:$msgid_clean" | head -n1)
        ;;
    mu)
        orig_msgfile=$($MU find -f l "i:$msgid_clean" |
            grep -v "^\*\*" | head -n1)
        ;;
    mu-old)
        orig_msgfile=$($MU find -f p "m:$msgid_clean" | head -n1)
        ;;
    nmzmail)
        nmzmail_results=$(mktemp -d)
        echo "+message-id:$msgid" | $NMZMAIL -n 1 -r "$nmzmail_results"
        msgfile=$(find "$nmzmail_results" -type l | head -n1)
        orig_msgfile=$(readlink "$msgfile")
        rm -rf "$nmzmail_results"
        ;;
    "")
        die "variable MUTTJUMP_INDEXER not set or empty"
        ;;
    *)
        die "unknown mail index program \"$MUTTJUMP_INDEXER\""
        ;;
esac

if [ -z "$orig_msgfile" -o ! -e "$orig_msgfile" ] ; then
    die "no message with msgid $msgid found!"
fi

# get containing maildir of $orig_msgfile
orig_maildir=$(dirname "$(dirname "$orig_msgfile")")
if [ ! -d "$orig_maildir/cur" ] ; then
    die "directory $(quote "$orig_maildir") doesn't exist or is no Maildir"
fi

jump_expr="~i'$msgid'"

if [ "$MUTTJUMP_MULTI_SCREEN_MODE" = no ] ; then

    jump_cmd="<limit>$jump_expr<enter>"
    if [ "$MUTTJUMP_MODE" = search ] ; then
        jump_cmd="$jump_cmd<limit>all<enter>"
    fi

    # Close message-stdin and open terminal-stdin instead.
    # mutt behaves different if STDIN is no terminal
    # TODO: Find cleaner solution (e.g. mutt command-line argument?)
    exec 0<&-
    term="/dev/$(ps -p$$ -otty=)"
    exec < $term

    # start mutt, open original folder and jump to the original message
    $MUTT -f "$orig_maildir" -e "push \"$jump_cmd\""

else

    jump_cmd="l$jump_expr"
    if [ "$MUTTJUMP_MODE" = search ] ; then
        jump_cmd="${jump_cmd}lall"
    fi

    screen_window_name=$(MUTTJUMP_SCREEN_WINDOW_NAME_MANGLE "$orig_maildir")
    declare -a screen_opts
    if [ -n "$MUTTJUMP_SCREEN_SESSION" ] ; then
        screen_opts=("-S" "$MUTTJUMP_SCREEN_SESSION")
        screen_opts_str="-S $(quote "$MUTTJUMP_SCREEN_SESSION")"
    fi

    $SCREEN "${screen_opts[@]}" -p "$screen_window_name" -X eval "select '$screen_window_name'" "stuff \"$jump_cmd\""

    if [ $? != 0 ] ; then
        die "You have to manually start a screen session with:
$SCREEN $screen_opts_str -t $(quote "$screen_window_name") $MUTT -f $(quote "$orig_maildir")"
    fi
fi
